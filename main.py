from fastapi import FastAPI, Request
import telegram
from openai import AsyncOpenAI
import os

# üîë –¢–æ–∫–µ–Ω–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
#print(f"OPENAI_API_KEY {OPENAI_API_KEY}")
#print(f"TELEGRAM_TOKEN {TELEGRAM_TOKEN}")

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
bot = telegram.Bot(token=TELEGRAM_TOKEN)
print(f"bot {bot}")

# üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# üåê FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()
print(f"app {app}")

# –ó–º—ñ–Ω–Ω–∞ JSON –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
character_traits = {
    "–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ": ["–∞–ª–∫–æ–≥–æ–ª—ñ–∑–º", "–∫—É—Ä—ñ–Ω–Ω—è"],
    "–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ_—Ä–∏—Å–∏": ["–¥–æ–±—Ä–æ—Ç–∞", "—á–µ—Å–Ω—ñ—Å—Ç—å", "–ø—Ä–∞—Ü—å–æ–≤–∏—Ç—ñ—Å—Ç—å"],
    "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ_—Ä–∏—Å–∏": ["—ñ–º–ø—É–ª—å—Å–∏–≤–Ω—ñ—Å—Ç—å", "–Ω–µ–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å"],
    "—ñ–Ω—Ç–µ—Ä–µ—Å–∏": ["—á–∏—Ç–∞–Ω–Ω—è", "—Å–ø–æ—Ä—Ç", "–º—É–∑–∏–∫–∞"]
}



# –§–æ—Ä–º—É—î–º–æ system prompt –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
system_prompt = f"""
–¢–∏ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —ñ–º—ñ—Ç—É—î –æ—Å–æ–±—É –∑ —Ç–∞–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ #characteristics :
{character_traits} #end_characteristics

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å—Ç–∏–ª—ñ —Ü—ñ—î—ó –æ—Å–æ–±–∏.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ #characteristics - –º–∞—î —Ñ–æ—Ä–º–∞—Ç JSON
–¥–µ —î –∫–ª—é—á —è–∫ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–æ —Å—Ç–æ—ó—Ç—å –¥–æ –¥–≤–æ–∫—Ä–∞–ø–∫–∏ —ñ –ø–µ—Ä–µ–ª—ñ–∫ –∑–Ω–∞—á–µ–Ω—å –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏. 
(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–∑–∞—Å–æ–±–∏": [ "–º–æ–ª–æ—Ç–æ–∫", "–≤—ñ–¥–∫—Ä—É—Ç–∫–∞", "–∑—É–±–∏–ª–æ"]



–ö–æ–ª–∏ —è –≤ —Å–≤–æ—î–º—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—ñ –∑–≥–∞–¥–∞—é –æ–¥–Ω–µ –∑ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ #characteristics —Ç–æ –ø–æ—á–Ω–∏ —Ñ—Ä–∞–∑—É –∑—ñ —Å–ª—ñ–≤ "—Ç–∞–∫ —Ç–∞–∫–∏ —Ç–∞–∫."
–Ø–∫—â–æ –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è —Ö–æ—á—å –æ–¥–Ω–µ –∑ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–æ –ø–æ—á–∏–Ω–∞–π –¥–æ–≤—ñ–ª—å–Ω–æ.
–ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ —Ç–∏–ø—É "—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç" –Ω–µ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –∑–≥–∞–¥–∫–æ—é –∑–Ω–∞—á–µ–Ω—å —Ç–∏–ø—É "–º–æ–ª–æ—Ç–æ–∫" "–≤—ñ–¥–∫—Ä—É—Ç–∫–∞" —ñ —Ç.—ñ.


"""

@app.post("/webhook")
async def telegram_webhook(request: Request):
    print(f"start webhook")
    data = await request.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    user_text = message.get("text")

    if not chat_id or not user_text:
        return {"status": "ignored"}

    # üß† –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ OpenAI
    try:
        response = await call_gpt(user_text)
        await bot.send_message(chat_id=chat_id, text=response)
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT.")
        print(f"–ü–æ–º–∏–ª–∫–∞ GPT: {e}")

    return {"status": "ok"}


async def call_gpt(user_prompt: str) -> str:
    try:
        completion = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI API: {e}"
